module tool.createproject;

import std.stdio;
import std.file;
import std.path;
import std.format;

enum DUB_JSON_TEMPLATE = q{
{
	"name": "%s",
	"description": "A new Dlango project.",
	"authors": [],
	"copyright": "Copyright Â© 2025, Your Name",
	"license": "proprietary",
	"dependencies": {
		"dlango": {"path": "/Users/cartersmith/personal/dlango"},
		"d2sqlite3": "~>0.12.0",
		"asdf": "~>0.7.17"
	},
    "sourcePaths": ["source"],
    "importPaths": ["source"]
}
};

enum APP_D_TEMPLATE = q{
import std.stdio;
import models;
import orm;

void main() {
    writeln("Welcome to your new Dlango project!");
    writeln("Define some models in source/models/, then run:");
    writeln("dlango-admin makemigrations");
    writeln("dlango-admin migrate");
}
};

enum SETTINGS_DB_D_TEMPLATE = q{
module settings.db;

import orm.db;
import d2sqlite3;

// By default, use a simple SQLite database in the project root.
enum DB_PATH = "db.sqlite3";

// This function is used by the ORM and migration tools to get a DB connection.
DbConnection* getDbConnection() {
    // For production, you would configure a more robust database here.
    return new Database(DB_PATH);
}
};

enum MODELS_PACKAGE_D_TEMPLATE = q{
module models;

import orm;
// needed for mixin.
import std.meta;
import std.array;
import std.sumtype;
import std.datetime;
// -

// Does not matter where you make your models, just register them here.
alias AllModels = AliasSeq!();
};

/// Template for the migrations package file.
enum MIGRATIONS_PACKAGE_D_TEMPLATE = q{
module migrations;
// This package contains your database migration files, generated by 'makemigrations'.
};

void createProject(string projectName) {
	auto projectRoot = buildPath(getcwd(), projectName);
	writeln("Creating new Dlango project at: ", projectRoot);

	if (exists(projectRoot)) {
		stderr.writeln("Error: Directory '", projectName, "' already exists.");
		return;
	}

	mkdirRecurse(projectRoot);
	auto sourceDir = buildPath(projectRoot, "source");
	mkdir(sourceDir);
	mkdir(buildPath(sourceDir, "models"));
	mkdir(buildPath(sourceDir, "migrations"));
	mkdir(buildPath(sourceDir, "settings"));

	try {
		writeFile(buildPath(projectRoot, "dub.json"), format(DUB_JSON_TEMPLATE, projectName));
		writeFile(buildPath(sourceDir, "app.d"), APP_D_TEMPLATE);
		writeFile(buildPath(sourceDir, "settings", "db.d"), SETTINGS_DB_D_TEMPLATE);
		writeFile(buildPath(sourceDir, "models", "package.d"), MODELS_PACKAGE_D_TEMPLATE);
		writeFile(buildPath(sourceDir, "migrations", "package.d"), MIGRATIONS_PACKAGE_D_TEMPLATE);
	}
	catch (Exception e) {
		stderr.writeln("Error writing project files: ", e.msg);
		rmdirRecurse(projectRoot);
		return;
	}

	writeln("\nproject '", projectName, "' created.");
	writeln("cd ", projectName);
    writeln("Once you've defined models and registered them in models/package.d, run these commands:");
	writeln("dlango-admin makemigrations");
	writeln("dlango-admin migrate");
}

private void writeFile(string path, string content) {
	std.file.write(path, content);
	writeln("  Created ", path);
}
